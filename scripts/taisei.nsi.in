Unicode true

;
;   TODO: clean up this unholy mess
;   Most stuff here have been ported from the CPack template
;

Name "Taisei Project"
!define PUBLISHER "Taisei Project"
!define APPNAME "Taisei Project"

OutFile "@OUTPUT@"
SetCompressor /SOLID lzma
SetCompressorDictSize 64

!define VERSION "@VERSION({string})@"
!define PATCH "0"
!define INST_DIR "@INSTALL_DIR@"

!include LogicLib.nsh

!if @TAISEI_64BIT@ == 1
    !include x64.nsh
    !define ARCH_INSTDIR "$PROGRAMFILES64\${APPNAME}"
    InstallDir "${ARCH_INSTDIR}"
!else
    !define ARCH_INSTDIR "$PROGRAMFILES32\${APPNAME}"
    InstallDir "${ARCH_INSTDIR}"
!endif

; All vars must be global...
Var STARTMENU_FOLDER
Var MUI_TEMP
Var START_MENU
Var DO_NOT_ADD_TO_PATH
Var ADD_TO_PATH_ALL_USERS
Var ADD_TO_PATH_CURRENT_USER
Var INSTALL_DESKTOP
Var SV_ALLUSERS
Var IS_DEFAULT_INSTALLDIR

; UI
!include "MUI2.nsh"
!include "InstallOptions.nsh"

!define MUI_HEADERIMAGE_BITMAP "@MESON_SOURCE_ROOT@/misc/icons/taisei.ico"
!define MUI_FINISHPAGE_RUN "$INSTDIR/taisei.exe"

!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_LICENSE "@MESON_BUILD_ROOT@/COPYING.txt"
Page custom InstallOptionsPage
!insertmacro MUI_PAGE_DIRECTORY

!define MUI_STARTMENUPAGE_REGISTRY_ROOT "SHCTX"
!define MUI_STARTMENUPAGE_REGISTRY_KEY "Software\${PUBLISHER}\${APPNAME}"
!define MUI_STARTMENUPAGE_REGISTRY_VALUENAME "Start Menu Folder"
!insertmacro MUI_PAGE_STARTMENU Application $STARTMENU_FOLDER

!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH

!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES

!insertmacro MUI_LANGUAGE "English"

ReserveFile "@INSTALL_OPTIONS_INI@"
ReserveFile /plugin InstallOptions.dll
# !insertmacro MUI_RESERVEFILE_INSTALLOPTIONS

; Installer sections
Function ConditionalAddToRegisty
  Pop $0
  Pop $1
  StrCmp "$0" "" ConditionalAddToRegisty_EmptyString
    WriteRegStr SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "$1" "$0"
    DetailPrint "Set install registry entry: '$1' to '$0'"
  ConditionalAddToRegisty_EmptyString:
FunctionEnd

Section "-Core installation"
    SetOutPath "$INSTDIR"

    File /r "${INST_DIR}\*.*"

    ; Uninstaller
    WriteRegStr SHCTX "Software\${PUBLISHER}\${APPNAME}" "" $INSTDIR
    WriteUninstaller "$INSTDIR\Uninstall.exe"
    Push "DisplayName"
    Push "${APPNAME}"
    Call ConditionalAddToRegisty
    Push "DisplayVersion"
    Push "${VERSION}"
    Call ConditionalAddToRegisty
    Push "Publisher"
    Push "${PUBLISHER}"
    Call ConditionalAddToRegisty
    Push "UninstallString"
    Push "$INSTDIR\Uninstall.exe"
    Call ConditionalAddToRegisty
    Push "NoRepair"
    Push "1"
    Call ConditionalAddToRegisty

    ; Registration
    Push "DisplayIcon"
    Push "$INSTDIR\taisei.exe"
    Call ConditionalAddToRegisty
    Push "HelpLink"
    Push "https://taisei-project.org/"
    Call ConditionalAddToRegisty

    !insertmacro INSTALLOPTIONS_READ $INSTALL_DESKTOP "NSIS.InstallOptions.ini" "Field 5" "State"
    !insertmacro MUI_STARTMENU_WRITE_BEGIN Application

    CreateDirectory "$SMPROGRAMS\$STARTMENU_FOLDER"
    CreateShortcut "$SMPROGRAMS\$STARTMENU_FOLDER\Taisei.lnk" "$INSTDIR\taisei.exe"

    !insertmacro INSTALLOPTIONS_READ $DO_NOT_ADD_TO_PATH "NSIS.InstallOptions.ini" "Field 2" "State"
    !insertmacro INSTALLOPTIONS_READ $ADD_TO_PATH_ALL_USERS "NSIS.InstallOptions.ini" "Field 3" "State"
    !insertmacro INSTALLOPTIONS_READ $ADD_TO_PATH_CURRENT_USER "NSIS.InstallOptions.ini" "Field 4" "State"

    Push "StartMenu"
    Push "$STARTMENU_FOLDER"
    Call ConditionalAddToRegisty
    Push "DoNotAddToPath"
    Push "$DO_NOT_ADD_TO_PATH"
    Call ConditionalAddToRegisty
    Push "AddToPathAllUsers"
    Push "$ADD_TO_PATH_ALL_USERS"
    Call ConditionalAddToRegisty
    Push "AddToPathCurrentUser"
    Push "$ADD_TO_PATH_CURRENT_USER"
    Call ConditionalAddToRegisty
    Push "InstallToDesktop"
    Push "$INSTALL_DESKTOP"
    Call ConditionalAddToRegisty

    !insertmacro MUI_STARTMENU_WRITE_END

    DeleteRegKey HKCR ".tsr"
    DeleteRegKey HKCR "TaiseiProject.tsr"
    DeleteRegKey HKCR "TaiseiProject.tsr\DefaultIcon"
    DeleteRegKey HKCR "TaiseiProject.tsr\Shell"
    DeleteRegKey HKCR "TaiseiProject.tsr\Shell\Open"
    DeleteRegKey HKCR "TaiseiProject.tsr\Shell\Open\Command"
    DeleteRegKey HKCR "Applications\taisei.exe"
    DeleteRegKey HKCR "Applications\taisei.exe\DefaultIcon"
    DeleteRegKey HKCR "Applications\taisei.exe\Shell"
    DeleteRegKey HKCR "Applications\taisei.exe\Shell\Open"
    DeleteRegKey HKCR "Applications\taisei.exe\Shell\Open\Command"

    WriteRegStr HKCR ".tsr" "" "TaiseiProject.tsr"
    WriteRegStr HKCR ".tsr" "Content Type" "application/x-taisei-replay"
    WriteRegStr HKCR "TaiseiProject.tsr" "" "Taisei Project replay"
    WriteRegStr HKCR "TaiseiProject.tsr" "FriendlyTypeName" "@$INSTDIR\taisei.exe,-2"
    WriteRegStr HKCR "TaiseiProject.tsr\DefaultIcon" "" "$INSTDIR\taisei.exe,1"
    WriteRegStr HKCR "TaiseiProject.tsr\Shell\Open\Command" "" "$\"$INSTDIR\taisei.exe$\" --replay $\"%1$\""
    WriteRegStr HKCR "Applications\taisei.exe" "" "Taisei Project"
    WriteRegStr HKCR "Applications\taisei.exe" "FriendlyAppName" "@$INSTDIR\taisei.exe,-1"
    WriteRegStr HKCR "Applications\taisei.exe\DefaultIcon" "" "$INSTDIR\taisei.exe,1"
    WriteRegStr HKCR "Applications\taisei.exe\Shell\Open\Command" "" "$\"$INSTDIR\taisei.exe$\" --replay $\"%1$\""
SectionEnd

!define NT_current_env 'HKCU "Environment"'
!define NT_all_env     'HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"'

; StrStr
; input, top of stack = string to search for
;        top of stack-1 = string to search in
; output, top of stack (replaces with the portion of the string remaining)
; modifies no other variables.
;
; Usage:
;   Push "this is a long ass string"
;   Push "ass"
;   Call StrStr
;   Pop $R0
;  ($R0 at this point is "ass string")

!macro StrStr un
Function ${un}StrStr
Exch $R1 ; st=haystack,old$R1, $R1=needle
  Exch    ; st=old$R1,haystack
  Exch $R2 ; st=old$R1,old$R2, $R2=haystack
  Push $R3
  Push $R4
  Push $R5
  StrLen $R3 $R1
  StrCpy $R4 0
  ; $R1=needle
  ; $R2=haystack
  ; $R3=len(needle)
  ; $R4=cnt
  ; $R5=tmp
  loop:
    StrCpy $R5 $R2 $R3 $R4
    StrCmp $R5 $R1 done
    StrCmp $R5 "" done
    IntOp $R4 $R4 + 1
    Goto loop
done:
  StrCpy $R1 $R2 "" $R4
  Pop $R5
  Pop $R4
  Pop $R3
  Pop $R2
  Exch $R1
FunctionEnd
!macroend
!insertmacro StrStr ""
!insertmacro StrStr "un."

Function Trim ; Added by Pelaca
    Exch $R1
    Push $R2
Loop:
    StrCpy $R2 "$R1" 1 -1
    StrCmp "$R2" " " RTrim
    StrCmp "$R2" "$\n" RTrim
    StrCmp "$R2" "$\r" RTrim
    StrCmp "$R2" ";" RTrim
    GoTo Done
RTrim:
    StrCpy $R1 "$R1" -1
    Goto Loop
Done:
    Pop $R2
    Exch $R1
FunctionEnd

Function AddToPath
    Exch $0
    Push $1
    Push $2
    Push $3

    # don't add if the path doesn't exist
    IfFileExists "$0\*.*" "" AddToPath_done

    ReadEnvStr $1 PATH
    ; if the path is too long for a NSIS variable NSIS will return a 0
    ; length string.    If we find that, then warn and skip any path
    ; modification as it will trash the existing path.
    StrLen $2 $1
    IntCmp $2 0 CheckPathLength_ShowPathWarning CheckPathLength_Done CheckPathLength_Done
        CheckPathLength_ShowPathWarning:
        Messagebox MB_OK|MB_ICONEXCLAMATION "Warning! PATH too long; installer unable to modify PATH!"
        Goto AddToPath_done
    CheckPathLength_Done:
    Push "$1;"
    Push "$0;"
    Call StrStr
    Pop $2
    StrCmp $2 "" "" AddToPath_done
    Push "$1;"
    Push "$0\;"
    Call StrStr
    Pop $2
    StrCmp $2 "" "" AddToPath_done
    GetFullPathName /SHORT $3 $0
    Push "$1;"
    Push "$3;"
    Call StrStr
    Pop $2
    StrCmp $2 "" "" AddToPath_done
    Push "$1;"
    Push "$3\;"
    Call StrStr
    Pop $2
    StrCmp $2 "" "" AddToPath_done

    StrCmp $ADD_TO_PATH_ALL_USERS "1" ReadAllKey
        ReadRegStr $1 ${NT_current_env} "PATH"
        Goto DoTrim
    ReadAllKey:
        ReadRegStr $1 ${NT_all_env} "PATH"
    DoTrim:
    StrCmp $1 "" AddToPath_NTdoIt
        Push $1
        Call Trim
        Pop $1
        StrCpy $0 "$1;$0"
    AddToPath_NTdoIt:
        StrCmp $ADD_TO_PATH_ALL_USERS "1" WriteAllKey
            WriteRegExpandStr ${NT_current_env} "PATH" $0
            Goto DoSend
        WriteAllKey:
            WriteRegExpandStr ${NT_all_env} "PATH" $0
        DoSend:
        SendMessage ${HWND_BROADCAST} ${WM_WININICHANGE} 0 "STR:Environment" /TIMEOUT=5000

    AddToPath_done:
        Pop $3
        Pop $2
        Pop $1
        Pop $0
FunctionEnd

Section "-Add to path"
    Push $INSTDIR
    StrCmp "" "ON" 0 doNotAddToPath
    StrCmp $DO_NOT_ADD_TO_PATH "1" doNotAddToPath 0
        Call AddToPath
    doNotAddToPath:
SectionEnd

Function InstallOptionsPage
    !insertmacro MUI_HEADER_TEXT "Install Options" "Choose options for installing Taisei Project"
    !insertmacro INSTALLOPTIONS_DISPLAY "NSIS.InstallOptions.ini"
FunctionEnd

Function un.RemoveFromPath
    Exch $0
    Push $1
    Push $2
    Push $3
    Push $4
    Push $5
    Push $6

    IntFmt $6 "%c" 26 # DOS EOF

    StrCmp $ADD_TO_PATH_ALL_USERS "1" unReadAllKey
        ReadRegStr $1 ${NT_current_env} "PATH"
        Goto unDoTrim
    unReadAllKey:
        ReadRegStr $1 ${NT_all_env} "PATH"
    unDoTrim:
    StrCpy $5 $1 1 -1 # copy last char
    StrCmp $5 ";" +2 # if last char != ;
        StrCpy $1 "$1;" # append ;
    Push $1
    Push "$0;"
    Call un.StrStr ; Find `$0;` in $1
    Pop $2 ; pos of our dir
    StrCmp $2 "" unRemoveFromPath_done
        ; else, it is in path
        # $0 - path to add
        # $1 - path var
        StrLen $3 "$0;"
        StrLen $4 $2
        StrCpy $5 $1 -$4 # $5 is now the part before the path to remove
        StrCpy $6 $2 "" $3 # $6 is now the part after the path to remove
        StrCpy $3 $5$6

        StrCpy $5 $3 1 -1 # copy last char
        StrCmp $5 ";" 0 +2 # if last char == ;
            StrCpy $3 $3 -1 # remove last char

        StrCmp $ADD_TO_PATH_ALL_USERS "1" unWriteAllKey
            WriteRegExpandStr ${NT_current_env} "PATH" $3
            Goto unDoSend
        unWriteAllKey:
            WriteRegExpandStr ${NT_all_env} "PATH" $3
        unDoSend:
        SendMessage ${HWND_BROADCAST} ${WM_WININICHANGE} 0 "STR:Environment" /TIMEOUT=5000

    unRemoveFromPath_done:
        Pop $6
        Pop $5
        Pop $4
        Pop $3
        Pop $2
        Pop $1
        Pop $0
FunctionEnd

Section "Uninstall"
    ReadRegStr $START_MENU SHCTX \
    "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "StartMenu"
    ReadRegStr $DO_NOT_ADD_TO_PATH SHCTX \
    "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "DoNotAddToPath"
    ReadRegStr $ADD_TO_PATH_ALL_USERS SHCTX \
    "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "AddToPathAllUsers"
    ReadRegStr $ADD_TO_PATH_CURRENT_USER SHCTX \
    "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "AddToPathCurrentUser"
    ReadRegStr $INSTALL_DESKTOP SHCTX \
    "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "InstallToDesktop"

    DeleteRegKey HKCR ".tsr"
    DeleteRegKey HKCR "TaiseiProject.tsr"
    DeleteRegKey HKCR "TaiseiProject.tsr\DefaultIcon"
    DeleteRegKey HKCR "TaiseiProject.tsr\Shell"
    DeleteRegKey HKCR "TaiseiProject.tsr\Shell\Open"
    DeleteRegKey HKCR "TaiseiProject.tsr\Shell\Open\Command"
    DeleteRegKey HKCR "Applications\taisei.exe"
    DeleteRegKey HKCR "Applications\taisei.exe\DefaultIcon"
    DeleteRegKey HKCR "Applications\taisei.exe\Shell"
    DeleteRegKey HKCR "Applications\taisei.exe\Shell\Open"
    DeleteRegKey HKCR "Applications\taisei.exe\Shell\Open\Command"

    @UNINSTALL_COMMANDS@

    Delete "$INSTDIR\Uninstall.exe"
    DeleteRegKey SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\%{APPNAME}"

    RMDir "$INSTDIR"
    DeleteRegKey SHCTX "Software\${PUBLISHER}\${APPNAME}"

    Delete "$SMPROGRAMS\$MUI_TEMP\Uninstall.lnk"
    Delete "$SMPROGRAMS\$MUI_TEMP\Taisei.lnk"

    !insertmacro MUI_STARTMENU_GETFOLDER Application $MUI_TEMP
    Delete "$SMPROGRAMS\$MUI_TEMP\Uninstall.lnk"
    Delete "$SMPROGRAMS\$MUI_TEMP\Taisei.lnk"
    RMDir "$SMPROGRAMS\$MUI_TEMP"

    DeleteRegKey /ifempty SHCTX "Software\${PUBLISHER}\${APPNAME}"

    Push $INSTDIR
    StrCmp $DO_NOT_ADD_TO_PATH_ "1" doNotRemoveFromPath 0
        Call un.RemoveFromPath
    doNotRemoveFromPath:
SectionEnd

Function .onInit
    !if @TAISEI_64BIT@ == 1
        ${If} ${RunningX64}
            SetRegView 64
        ${Else}
            MessageBox MB_OK|MB_ICONSTOP "This installer is for 64-bit systems only."
            Abort
        ${EndIf}
    !endif

    ReadRegStr $0 HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "UninstallString"
    StrCmp $0 "" inst

    MessageBox MB_YESNOCANCEL|MB_ICONEXCLAMATION \
    "${APPNAME} is already installed. $\n$\nDo you want to uninstall the old version before installing the new one?" \
    /SD IDYES IDYES uninst IDNO inst
    Abort

;Run the uninstaller
uninst:
    ClearErrors
    StrLen $2 "\Uninstall.exe"
    StrCpy $3 $0 -$2 # remove "\Uninstall.exe" from UninstallString to get path
    ExecWait '"$0" /S _?=$3' ;Do not copy the uninstaller to a temp file

    IfErrors uninst_failed inst
uninst_failed:
    MessageBox MB_OK|MB_ICONSTOP "Uninstall failed."
    Abort

inst:
    ; check to see if /D has been used to change
    ; the install directory by comparing it to the
    ; install directory that is expected to be the
    ; default
    StrCpy $IS_DEFAULT_INSTALLDIR 0
    StrCmp "$INSTDIR" "${ARCH_INSTDIR}" 0 +2
        StrCpy $IS_DEFAULT_INSTALLDIR 1

    StrCpy $SV_ALLUSERS "JustMe"
    ; if default install dir then change the default
    ; if it is installed for JustMe"

    StrCmp "$IS_DEFAULT_INSTALLDIR" "1" 0 +2
        StrCpy $INSTDIR "$DOCUMENTS\${APPNAME}"

    ClearErrors
    UserInfo::GetName
    IfErrors noLM
    Pop $0
    UserInfo::GetAccountType
    Pop $1
    StrCmp $1 "Admin" 0 +4
        SetShellVarContext all
        StrCpy $SV_ALLUSERS "AllUsers"
        Goto done
    StrCmp $1 "Power" 0 +4
        SetShellVarContext all
        StrCpy $SV_ALLUSERS "AllUsers"
        Goto done

    noLM:
        StrCpy $SV_ALLUSERS "AllUsers"

    done:
    StrCmp $SV_ALLUSERS "AllUsers" 0 +3
        StrCmp "$IS_DEFAULT_INSTALLDIR" "1" 0 +2
            StrCpy $INSTDIR "${ARCH_INSTDIR}"

    !insertmacro INSTALLOPTIONS_EXTRACT_AS "@INSTALL_OPTIONS_INI@" "NSIS.InstallOptions.ini"
FunctionEnd
